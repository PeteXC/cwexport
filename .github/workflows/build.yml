name: Build and Release
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    # - name: Test
    #   run: GOOS="linux" GOARCH="amd64" go build -o cdk/lambda/processor/lambda -ldflags "-s -w" cdk/lambda/processor/main.go && go test -v -cover ./...

    - name: Build Changelog
      uses: heinrichreimer/github-changelog-generator-action@v2.3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: false
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body: ${{steps.github_release.outputs.changelog}}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Linux x86
      run: GOOS="linux" GOARCH="amd64" go build -o cdk/lambda/processor/lambda -ldflags "-s -w" cdk/lambda/processor/main.go && GOOS="linux" GOARCH="amd64" go build -o output/cwexport-linux-x86

    - name: Package Linux x86
      run: tar -zcvf output/cwexport-linux-x86.tar.gz output/cwexport-linux-x86

    - name: Build Linux arm64
      run: GOOS="linux" GOARCH="amd64" go build -o cdk/lambda/processor/lambda -ldflags "-s -w" cdk/lambda/processor/main.go && GOOS="linux" GOARCH="arm64" go build -o output/cwexport-linux-arm64

    - name: Package Linux arm64
      run: tar -zcvf output/cwexport-linux-arm64.tar.gz output/cwexport-linux-arm64

    - name: Build MacOS x86
      run: GOOS="linux" GOARCH="amd64" go build -o cdk/lambda/processor/lambda -ldflags "-s -w" cdk/lambda/processor/main.go && GOOS="darwin" GOARCH="amd64" go build -o output/cwexport-darwin-x86

    - name: Package MacOS x86
      run: tar -zcvf output/cwexport-darwin-x86.tar.gz output/cwexport-darwin-x86

    - name: Build MacOS arm64
      run: GOOS="linux" GOARCH="amd64" go build -o cdk/lambda/processor/lambda -ldflags "-s -w" cdk/lambda/processor/main.go && GOOS="darwin" GOARCH="arm64" go build -o output/cwexport-darwin-arm64

    - name: Package MacOS arm64
      run: tar -zcvf output/cwexport-darwin-arm64.tar.gz output/cwexport-darwin-arm64

    - name: Build Windows x86
      run: GOOS="linux" GOARCH="amd64" go build -o cdk/lambda/processor/lambda -ldflags "-s -w" cdk/lambda/processor/main.go && GOOS="windows" GOARCH="amd64" go build -o output/cwexport-win-x86

    - name: Package Windows x86
      run: tar -zcvf output/cwexport-windows-x86.tar.gz output/cwexport-windows-x86

    - name: Upload linux x86 artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./output/cwexport-linux-x86.tar.gz
        asset_name: cwexport-linux-x86.tar.gz
        asset_content_type: application/gzip

    - name: Upload linux arm64 artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./output/cwexport-linux-arm64.tar.gz
        asset_name: cwexport-linux-arm64.tar.gz
        asset_content_type: application/gzip

    - name: Upload darwin x86 artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./output/cwexport-darwin-x86.tar.gz
        asset_name: cwexport-darwin-x86.tar.gz
        asset_content_type: application/gzip

    - name: Upload darwin arm64 artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./output/cwexport-darwin-arm64.tar.gz
        asset_name: cwexport-darwin-arm64.tar.gz
        asset_content_type: application/gzip

    - name: upload windows artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./output/cwexport-win-x86.tar.gz
        asset_name: cwexport-win-x86.tar.gz
        asset_content_type: application/gzip